from aiogram import Bot
from aiogram.types import Message, ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from typing import List, Dict, Optional
from config import config
from database.models import Appointment, Barber
import logging
import pytz

logger = logging.getLogger(__name__)


async def send_welcome_message(bot: Bot, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *BarberShop*!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–∞—à–∏–º –±–∞—Ä–±–µ—Ä–∞–º –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n"
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "‚úÇÔ∏è –ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥–∏\n"
            "üßî –í—ã–±–æ—Ä –±–∞—Ä–±–µ—Ä–∞\n"
            "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤\n"
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Error sending welcome message: {e}")


async def send_appointment_confirmation(
        bot: Bot,
        chat_id: int,
        appointment: Appointment,
        barber: Barber
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    try:
        appointment_date = datetime.strptime(appointment.date, "%Y-%m-%d")
        text = (
            "‚úÖ *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n"
            f"üìÖ *–î–∞—Ç–∞:* {appointment_date.strftime('%d %B %Y')}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {appointment.time_slot}\n"
            f"üßî *–ë–∞—Ä–±–µ—Ä:* {barber.name}\n"
            f"‚úÇÔ∏è *–£—Å–ª—É–≥–∞:* {appointment.service.name}\n"
            f"üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {appointment.service.price} —Ä—É–±.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'."
        )
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Error sending appointment confirmation: {e}")


async def send_reminder(
        bot: Bot,
        chat_id: int,
        appointment: Appointment,
        hours_before: int = 24
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏"""
    try:
        appointment_date = datetime.strptime(appointment.date, "%Y-%m-%d")
        time_part = appointment.time_slot.split('-')[0]
        appointment_datetime = datetime.strptime(
            f"{appointment.date} {time_part}",
            "%Y-%m-%d %H:%M"
        ).replace(tzinfo=pytz.timezone(config.TIMEZONE))

        text = (
            "üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏*\n\n"
            f"–£ –≤–∞—Å –∑–∞–ø–∏—Å—å *—á–µ—Ä–µ–∑ {hours_before} —á–∞—Å(–∞/–æ–≤)*:\n"
            f"üìÖ *–î–∞—Ç–∞:* {appointment_date.strftime('%d %B %Y')}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {appointment.time_slot}\n"
            f"üßî *–ë–∞—Ä–±–µ—Ä:* {appointment.barber.name}\n"
            f"‚úÇÔ∏è *–£—Å–ª—É–≥–∞:* {appointment.service.name}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!"
        )
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Error sending reminder: {e}")


async def notify_admins(
        bot: Bot,
        message: str,
        exclude_ids: List[int] = None
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        if not exclude_ids:
            exclude_ids = []

        for admin_id in config.ADMIN_IDS:
            if admin_id not in exclude_ids:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=f"üë®‚Äçüíª *–ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:*\n\n{message}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.error(f"Error notifying admin {admin_id}: {e}")
    except Exception as e:
        logger.error(f"Error in notify_admins: {e}")


async def notify_appointment_cancellation(
        bot: Bot,
        client_id: int,
        appointment: Appointment,
        barber: Barber,
        reason: Optional[str] = None
):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏"""
    try:
        text = (
            "‚ùå *–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"
            f"üìÖ –î–∞—Ç–∞: {appointment.date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment.time_slot}\n"
            f"üßî –ë–∞—Ä–±–µ—Ä: {barber.name}\n"
        )
        if reason:
            text += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"

        await bot.send_message(
            chat_id=client_id,
            text=text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Error sending cancellation notification: {e}")


async def send_daily_schedule_to_barbers(
        bot: Bot,
        schedule: Dict[int, List[Appointment]]
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±–∞—Ä–±–µ—Ä–∞–º –Ω–∞ –¥–µ–Ω—å"""
    try:
        for barber_id, appointments in schedule.items():
            if not appointments:
                continue

            barber_appointments = []
            for app in appointments:
                barber_appointments.append(
                    f"‚è∞ {app.time_slot} - {app.service.name} "
                    f"({app.client_name or f'ID {app.user_id}'})"
                )

            text = (
                    "üìÖ *–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n" +
                    "\n".join(barber_appointments) +
                    "\n\n–£–¥–∞—á–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!"
            )

            await bot.send_message(
                chat_id=barber_id,
                text=text,
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.error(f"Error sending daily schedule: {e}")


async def send_feedback_request(
        bot: Bot,
        chat_id: int,
        appointment: Appointment,
        barber: Barber
):
    """–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è"""
    try:
        text = (
            "üôÇ *–ö–∞–∫ –≤–∞–º –ø–æ—Å–µ—â–µ–Ω–∏–µ?*\n\n"
            f"–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–∞—Ä–±–µ—Ä–∞ *{barber.name}*\n"
            "–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –∫–∞—á–µ—Å—Ç–≤–µ —É—Å–ª—É–≥–∏."
        )

        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("‚≠ê 1", callback_data="rate_1"),
            InlineKeyboardButton("‚≠ê 2", callback_data="rate_2"),
            InlineKeyboardButton("‚≠ê 3", callback_data="rate_3"),
            InlineKeyboardButton("‚≠ê 4", callback_data="rate_4"),
            InlineKeyboardButton("‚≠ê 5", callback_data="rate_5")
        )

        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Error sending feedback request: {e}")