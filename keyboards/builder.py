from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Optional
from database.models import Barber, Service, Schedule
from datetime import datetime, timedelta


def build_time_slots_keyboard(
        available_slots: List[Schedule],
        selected_date: datetime,
        page: int = 0,
        slots_per_page: int = 6
) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

    :param available_slots: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    :param selected_date: –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param slots_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup
    """
    keyboard = InlineKeyboardMarkup(row_width=3)

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * slots_per_page
    end_idx = start_idx + slots_per_page
    paginated_slots = available_slots[start_idx:end_idx]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    for slot in paginated_slots:
        keyboard.insert(
            InlineKeyboardButton(
                text=slot.time_slot.split('-')[0],
                callback_data=f"select_slot:{slot.id}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if page > 0:
        pagination_row.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"slots_page:{page - 1}"
            )
        )

    if end_idx < len(available_slots):
        pagination_row.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"slots_page:{page + 1}"
            )
        )

    if pagination_row:
        keyboard.row(*pagination_row)

    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –¥–∞—Ç—ã
    keyboard.row(
        InlineKeyboardButton(
            text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
            callback_data="change_date"
        )
    )

    return keyboard


def build_barbers_keyboard(
        barbers: List[Barber],
        selected_service_id: Optional[int] = None,
        with_back_button: bool = True
) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞—Ä–±–µ—Ä–∞

    :param barbers: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Barber
    :param selected_service_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ (–¥–ª—è callback)
    :param with_back_button: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup
    """
    keyboard = InlineKeyboardMarkup(row_width=2)

    for barber in barbers:
        callback_data = f"select_barber:{barber.id}"
        if selected_service_id:
            callback_data += f":{selected_service_id}"

        keyboard.insert(
            InlineKeyboardButton(
                text=f"üßî {barber.name}",
                callback_data=callback_data
            )
        )

    if with_back_button:
        keyboard.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_services"
            )
        )

    return keyboard


def build_services_keyboard(
        services: List[Service],
        selected_barber_id: Optional[int] = None,
        with_back_button: bool = True
) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏

    :param services: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Service
    :param selected_barber_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞ (–¥–ª—è callback)
    :param with_back_button: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup
    """
    keyboard = InlineKeyboardMarkup(row_width=2)

    for service in services:
        callback_data = f"select_service:{service.id}"
        if selected_barber_id:
            callback_data += f":{selected_barber_id}"

        keyboard.insert(
            InlineKeyboardButton(
                text=f"‚úÇÔ∏è {service.name} ({service.price} —Ä—É–±.)",
                callback_data=callback_data
            )
        )

    if with_back_button:
        keyboard.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_barbers"
            )
        )

    return keyboard


def build_calendar_keyboard(
        year: int = None,
        month: int = None,
        ignore_past_dates: bool = True
) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã

    :param year: –ì–æ–¥ (–µ—Å–ª–∏ None - —Ç–µ–∫—É—â–∏–π)
    :param month: –ú–µ—Å—è—Ü (–µ—Å–ª–∏ None - —Ç–µ–∫—É—â–∏–π)
    :param ignore_past_dates: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup
    """
    now = datetime.now()
    year = year or now.year
    month = month or now.month

    keyboard = InlineKeyboardMarkup(row_width=7)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ][month - 1]

    keyboard.row(
        InlineKeyboardButton(
            text=f"{month_name} {year}",
            callback_data="ignore"
        )
    )

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.row(*[
        InlineKeyboardButton(
            text=day,
            callback_data="ignore"
        ) for day in week_days
    ])

    # –î–∞—Ç—ã
    first_day = datetime(year, month, 1)
    last_day = datetime(
        year + 1 if month == 12 else year,
        1 if month == 12 else month + 1,
        1
    ) - timedelta(days=1)

    # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for _ in range(first_day.weekday()):
        keyboard.insert(
            InlineKeyboardButton(
                text=" ",
                callback_data="ignore"
            )
        )

    # –ö–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    current_date = datetime.now().date() if ignore_past_dates else datetime(1900, 1, 1).date()

    for day in range(1, last_day.day + 1):
        date = datetime(year, month, day).date()

        if date >= current_date:
            keyboard.insert(
                InlineKeyboardButton(
                    text=str(day),
                    callback_data=f"select_date:{date}"
                )
            )
        else:
            keyboard.insert(
                InlineKeyboardButton(
                    text=" ",
                    callback_data="ignore"
                )
            )

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    keyboard.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=f"prev_month:{year}:{month}"
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=f"next_month:{year}:{month}"
        )
    )

    return keyboard