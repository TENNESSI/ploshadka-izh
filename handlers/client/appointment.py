from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from database.queries import (
    get_db_session,
    get_appointments_by_date,
    get_appointment_by_id,
    cancel_appointment,
    confirm_appointment
)
from database.models import Appointment, Barber, Service
from keyboards.admin import (
    appointments_keyboard,
    appointment_actions_keyboard,
    confirm_keyboard,
    cancel_keyboard
)
from utils.date_utils import (
    get_current_date,
    format_appointment_date
)


class AppointmentStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏"""
    select_date = State()
    cancel_confirmation = State()


async def show_appointments_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–ø–∏—Å–µ–π"""
    await message.answer(
        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏:",
        reply_markup=appointments_keyboard()
    )


async def show_week_appointments(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥"""
    with get_db_session() as session:
        start_date = get_current_date()
        end_date = start_date + timedelta(days=7)

        appointments = session.query(Appointment).filter(
            Appointment.date.between(start_date, end_date)
        ).order_by(
            Appointment.date,
            Appointment.time_slot
        ).all()

    if not appointments:
        await message.answer(
            "–ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç",
            reply_markup=appointments_keyboard()
        )
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º
    appointments_by_day = {}
    for app in appointments:
        day = app.date.strftime("%d.%m.%Y")
        if day not in appointments_by_day:
            appointments_by_day[day] = []
        appointments_by_day[day].append(app)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = ["üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é:\n"]
    for day, day_appointments in appointments_by_day.items():
        response.append(f"\nüìå {day}:")
        for app in day_appointments:
            status_icon = "‚úÖ" if app.status == 'confirmed' else "üïí" if app.status == 'booked' else "‚ùå"
            response.append(
                f"{status_icon} {app.time_slot} - {app.barber.name}\n"
                f"–£—Å–ª—É–≥–∞: {app.service.name} | ID: {app.id}"
            )

    await message.answer(
        "\n".join(response),
        reply_markup=appointments_keyboard()
    )


async def show_appointments_by_date(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π"""
    date_map = {
        "–°–µ–≥–æ–¥–Ω—è": get_current_date(),
        "–ó–∞–≤—Ç—Ä–∞": get_current_date() + timedelta(days=1),
        "–ù–µ–¥–µ–ª—è": None
    }

    if message.text not in date_map:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return

    selected_date = date_map[message.text]

    if message.text == "–ù–µ–¥–µ–ª—è":
        await show_week_appointments(message)
        return

    await view_appointments_on_date(message, selected_date)


async def view_appointments_on_date(message: types.Message, date: datetime.date):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    with get_db_session() as session:
        appointments = get_appointments_by_date(session, date)

    if not appointments:
        await message.answer(
            f"–ù–∞ {format_appointment_date(date)} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç",
            reply_markup=appointments_keyboard()
        )
        return

    response = [f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {format_appointment_date(date)}:\n"]
    for app in appointments:
        status_icon = "‚úÖ" if app.status == 'confirmed' else "üïí" if app.status == 'booked' else "‚ùå"
        response.append(
            f"\n{status_icon} {app.time_slot} - {app.barber.name}\n"
            f"–£—Å–ª—É–≥–∞: {app.service.name} ({app.service.price} —Ä—É–±.)\n"
            f"ID –∑–∞–ø–∏—Å–∏: {app.id}"
        )

    await message.answer(
        "\n".join(response),
        reply_markup=appointment_actions_keyboard(appointments[0].id)
    )


async def handle_appointment_action(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é"""
    action, appointment_id = callback.data.split(':')
    appointment_id = int(appointment_id)

    with get_db_session() as session:
        appointment = get_appointment_by_id(session, appointment_id)
        if not appointment:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        if action == "confirm_app":
            confirm_appointment(session, appointment_id)
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å ID {appointment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n"
                f"{format_appointment_details(appointment)}",
                reply_markup=appointment_actions_keyboard(appointment_id)
            )
            await callback.answer("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

        elif action == "cancel_app":
            async with state.proxy() as data:
                data['appointment_id'] = appointment_id
            await callback.message.answer(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ID {appointment_id}?",
                reply_markup=confirm_keyboard()
            )
            await AppointmentStates.cancel_confirmation.set()


def format_appointment_details(appointment: Appointment) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø–∏—Å–∏"""
    return (
        f"üìÖ {format_appointment_date(appointment.date)} {appointment.time_slot}\n"
        f"üßî –ë–∞—Ä–±–µ—Ä: {appointment.barber.name}\n"
        f"‚úÇÔ∏è –£—Å–ª—É–≥–∞: {appointment.service.name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment.service.price} —Ä—É–±."
    )


async def confirm_appointment_cancellation(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    if message.text.lower() != '–¥–∞':
        await message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.finish()
        return

    async with state.proxy() as data:
        appointment_id = data['appointment_id']

    with get_db_session() as session:
        appointment = get_appointment_by_id(session, appointment_id)
        cancel_appointment(session, appointment_id)

    await message.answer(
        f"‚ùå –ó–∞–ø–∏—Å—å ID {appointment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞\n"
        f"{format_appointment_details(appointment)}",
        reply_markup=appointments_keyboard()
    )
    await state.finish()


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(
        show_appointments_menu,
        text="–ó–∞–ø–∏—Å–∏",
        is_admin=True
    )
    dp.register_message_handler(
        show_appointments_by_date,
        text=["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ù–µ–¥–µ–ª—è"],
        is_admin=True
    )
    dp.register_callback_query_handler(
        handle_appointment_action,
        lambda c: c.data.startswith(('confirm_app:', 'cancel_app:')),
        is_admin=True
    )
    dp.register_message_handler(
        confirm_appointment_cancellation,
        state=AppointmentStates.cancel_confirmation
    )