from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.queries import (
    get_db_session,
    get_all_services,
    get_service_by_id,
    add_service,
    delete_service
)
from keyboards.admin import (
    services_keyboard,
    service_actions_keyboard,
    confirm_keyboard,
    cancel_keyboard
)
from utils.notifications import notify_admins


class ServiceStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏"""
    waiting_for_name = State()
    waiting_for_duration = State()
    waiting_for_price = State()
    waiting_for_confirmation = State()
    waiting_for_deletion = State()


# –ú–µ–Ω—é —É—Å–ª—É–≥
async def show_services_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏"""
    await message.answer(
        "‚úÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:",
        reply_markup=services_keyboard()
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
async def add_service_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:",
        reply_markup=cancel_keyboard()
    )
    await ServiceStates.waiting_for_name.set()


async def process_service_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    async with state.proxy() as data:
        data['name'] = message.text

    await ServiceStates.next()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:",
        reply_markup=cancel_keyboard()
    )


async def process_service_duration(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏"""
    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")
        return

    async with state.proxy() as data:
        data['duration'] = duration

    await ServiceStates.next()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=cancel_keyboard()
    )


async def process_service_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏"""
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
        return

    async with state.proxy() as data:
        data['price'] = price

        confirm_message = (
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} –º–∏–Ω.\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data['price']} —Ä—É–±."
        )

    await ServiceStates.next()
    await message.answer(
        confirm_message,
        reply_markup=confirm_keyboard()
    )


async def confirm_add_service(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
    if message.text.lower() != '–¥–∞':
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=services_keyboard())
        await state.finish()
        return

    async with state.proxy() as data:
        with get_db_session() as session:
            new_service = add_service(
                session=session,
                name=data['name'],
                duration=data['duration'],
                price=data['price']
            )

    await message.answer(
        f"–£—Å–ª—É–≥–∞ ¬´{new_service.name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=services_keyboard()
    )
    await state.finish()
    await notify_admins(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —É—Å–ª—É–≥–∞: {new_service.name}")


# –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
async def delete_service_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
    with get_db_session() as session:
        services = get_all_services(session)

    if not services:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    services_text = "\n".join([f"{s.id}. {s.name} ({s.price} —Ä—É–±.)" for s in services])
    await message.answer(
        f"–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:\n\n{services_text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —É—Å–ª—É–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=cancel_keyboard()
    )
    await ServiceStates.waiting_for_deletion.set()


async def process_service_deletion(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=services_keyboard())
        await state.finish()
        return

    try:
        service_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID!")
        return

    with get_db_session() as session:
        service = get_service_by_id(session, service_id)
        if not service:
            await message.answer("–£—Å–ª—É–≥–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await state.finish()
            return

        try:
            success = delete_service(session, service_id)
            if success:
                await message.answer(
                    f"–£—Å–ª—É–≥–∞ ¬´{service.name}¬ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞!",
                    reply_markup=services_keyboard()
                )
            else:
                await message.answer(
                    f"–£—Å–ª—É–≥–∞ ¬´{service.name}¬ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)!",
                    reply_markup=services_keyboard()
                )
            await notify_admins(f"–£–¥–∞–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞: {service.name}")
        except Exception as e:
            await message.answer(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}",
                reply_markup=services_keyboard()
            )

        await state.finish()


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
async def show_services_list(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥"""
    with get_db_session() as session:
        services = get_all_services(session)

    if not services:
        await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç")
        return

    response = ["–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥:\n"]
    for service in services:
        response.append(
            f"\n‚úÇÔ∏è {service.name}\n"
            f"‚è± {service.duration} –º–∏–Ω. | üíµ {service.price} —Ä—É–±.\n"
            f"ID: {service.id}"
        )

    await message.answer("\n".join(response))


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(
        show_services_menu,
        text="–£—Å–ª—É–≥–∏",
        is_admin=True
    )

    dp.register_message_handler(
        add_service_start,
        text="–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É",
        is_admin=True
    )

    dp.register_message_handler(
        delete_service_start,
        text="–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É",
        is_admin=True
    )

    dp.register_message_handler(
        show_services_list,
        text="–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥",
        is_admin=True
    )

    # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_message_handler(
        process_service_name,
        state=ServiceStates.waiting_for_name
    )

    dp.register_message_handler(
        process_service_duration,
        state=ServiceStates.waiting_for_duration
    )

    dp.register_message_handler(
        process_service_price,
        state=ServiceStates.waiting_for_price
    )

    dp.register_message_handler(
        confirm_add_service,
        state=ServiceStates.waiting_for_confirmation
    )

    dp.register_message_handler(
        process_service_deletion,
        state=ServiceStates.waiting_for_deletion
    )