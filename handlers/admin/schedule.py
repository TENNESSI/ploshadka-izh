from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta
from database.queries import (
    get_db_session,
    get_active_barbers,
    get_available_slots,
    add_schedule_slot,
    generate_time_slots
)
from keyboards.admin import (
    schedule_menu_keyboard,
    barbers_for_schedule_keyboard,
    days_keyboard,
    cancel_keyboard,
    confirm_keyboard
)
from utils.date_utils import get_next_dates


class ScheduleStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    select_barber = State()
    select_day = State()
    select_slots = State()
    confirm_slots = State()
    custom_day = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def show_schedule_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    await message.answer(
        "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
        reply_markup=schedule_menu_keyboard()
    )


# –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def setup_schedule_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    with get_db_session() as session:
        barbers = get_active_barbers(session)

    if not barbers:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞:",
        reply_markup=barbers_for_schedule_keyboard(barbers)
    )
    await ScheduleStates.select_barber.set()


# –í—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def select_day_for_schedule(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞—Ä–±–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=schedule_menu_keyboard())
        await state.finish()
        return

    async with state.proxy() as data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –±–∞—Ä–±–µ—Ä–∞ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
        data['barber_name'] = message.text
        # –ü–æ–ª—É—á–∞–µ–º ID –±–∞—Ä–±–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "–ò–º—è [ID]")
        try:
            barber_id = int(message.text.split('[')[-1].replace(']', ''))
            data['barber_id'] = barber_id
        except:
            await message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞—Ä–±–µ—Ä–∞")
            await state.finish()
            return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=days_keyboard(get_next_dates(7))  # –°–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π
    )
    await ScheduleStates.select_day.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
async def process_selected_day(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤"""
    if message.text == "–î—Ä—É–≥–æ–π –¥–µ–Ω—å":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.01.2023):",
            reply_markup=cancel_keyboard()
        )
        await ScheduleStates.custom_day.set()
        return

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=schedule_menu_keyboard())
        await state.finish()
        return

    async with state.proxy() as data:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: "–ü–Ω, 15.01")
            day_str = message.text.split(', ')[1]
            day = datetime.strptime(day_str, "%d.%m").date()
            current_year = datetime.now().year
            data['date'] = day.replace(year=current_year).strftime("%Y-%m-%d")
        except:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã
    slots = generate_time_slots()

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
        reply_markup=create_slots_keyboard(slots)
    )
    await ScheduleStates.select_slots.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã
async def process_custom_day(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –≤—Ä—É—á–Ω—É—é –¥–∞—Ç—ã"""
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").date()
        async with state.proxy() as data:
            data['date'] = date.strftime("%Y-%m-%d")

        slots = generate_time_slots()

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=create_slots_keyboard(slots)
        )
        await ScheduleStates.select_slots.set()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
async def confirm_selected_slots(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    selected_slots = callback.data.split(':')[1].split(',')

    async with state.proxy() as data:
        data['selected_slots'] = selected_slots
        barber_name = data['barber_name']
        date = datetime.strptime(data['date'], "%Y-%m-%d").strftime("%d.%m.%Y")

    slots_text = "\n".join(f"‚Ä¢ {slot}" for slot in selected_slots)

    await callback.message.edit_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {barber_name} –Ω–∞ {date}:\n\n"
        f"{slots_text}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=confirm_keyboard()
    )
    await ScheduleStates.confirm_slots.set()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def save_schedule(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if message.text.lower() != '–¥–∞':
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                             reply_markup=schedule_menu_keyboard())
        await state.finish()
        return

    async with state.proxy() as data:
        barber_id = data['barber_id']
        date = data['date']
        slots = data['selected_slots']

    with get_db_session() as session:
        for slot in slots:
            add_schedule_slot(
                session=session,
                barber_id=barber_id,
                date=date,
                time_slot=slot
            )

    await message.answer(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        reply_markup=schedule_menu_keyboard()
    )
    await state.finish()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_slots_keyboard(slots: list) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–æ–≤"""
    keyboard = types.InlineKeyboardMarkup(row_width=3)

    for slot in slots:
        keyboard.insert(
            types.InlineKeyboardButton(
                text=slot,
                callback_data=f"slot:{slot}"
            )
        )

    keyboard.add(
        types.InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data="confirm_slots"
        )
    )

    return keyboard


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(
        show_schedule_menu,
        text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        is_admin=True
    )

    dp.register_message_handler(
        setup_schedule_start,
        text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        is_admin=True
    )

    dp.register_message_handler(
        select_day_for_schedule,
        state=ScheduleStates.select_barber
    )

    dp.register_message_handler(
        process_selected_day,
        state=ScheduleStates.select_day
    )

    dp.register_message_handler(
        process_custom_day,
        state=ScheduleStates.custom_day
    )

    dp.register_callback_query_handler(
        confirm_selected_slots,
        lambda c: c.data.startswith("confirm_slots") or "slot:" in c.data,
        state=ScheduleStates.select_slots
    )

    dp.register_message_handler(
        save_schedule,
        state=ScheduleStates.confirm_slots
    )